/*
	JWL - The JavaScript Widget Library version 0.8.2
	Copyright (c) 2016 - 2017 The Zonebuilder <zone.builder@gmx.com>
	http://sourceforge.net/projects/jwl-library/
	Licenses: GNU GPL2 or later; GNU LGPLv3 or later (http://sourceforge.net/p/jwl-library/wiki/License/)
 */
/**
	@fileOverview	JWL.components.jsonoptions configuration
*/
/* jshint browser: true, curly: true, eqeqeq: true, expr: true, funcscope: true, immed: true, latedef: true, loopfunc: true,  
	onevar: true, newcap: true, noarg: true, node: true, strict: true, trailing: true, undef: true, unused: vars, wsh: true */
/* globals JUL, JWL */

(function() {
'use strict';

/* generated by JCS version 1.3.1 */

/**
	Options object stored as JSON
	@namespace	JWL.components.jsonoptions namespace
	@name	JWL.components.jsonoptions
*/
JUL.ns('JWL.components.jsonoptions');

JUL.apply(JWL.components.jsonoptions, /** @lends JWL.components.jsonoptions */ {
	/**
		Component UI
		@type	Object
	*/
	ui: {
		tag: 'div', cid: '.jsonoptions', css: 'jsonoptions', children: [
			{tag: 'a', cid: '.jsonoptions-show', css: 'fa fa-gear', href: '#', title: 'Options'},
			{tag: 'div', css: 'jsonoptions-opts-wrap', children: [
				{tag: 'div', css: 'jsonoptions-opts', children: [
					{tag: 'textarea', cid: '.jsonoptions-edit', cols: '30', css: 'jsonoptions-edit', rows: '10', wrap: 'off'},
					{tag: 'div', css: 'jsonoptions-buttons', children: [
						{tag: 'button', cid: '.jsonoptions-ok', html: 'OK'},
						{tag: 'button', cid: '.jsonoptions-cancel', html: 'Cancel'}
					]}
				]}
			]}
		]
	},
	/**
		Component logic
		@type	Object
	*/
	logic: {
		'.jsonoptions': {
			'data-options': '', listeners: {
				saveoptions: function () {
					this.saveOptions();
				},
				toggleoptions: function () {
					this.showOptions();
				}
			}
		},
		'.jsonoptions-cancel': {
			listeners: {
				click: function () {
					JWL.trigger(this, 'toggleoptions');
				}
			}
		},
		'.jsonoptions-ok': {
			listeners: {
				click: function () {
					JWL.trigger(this, 'saveoptions');
				}
			}
		},
		'.jsonoptions-show': {
			listeners: {
				click: function (oEvent) {
					oEvent = oEvent || event;	
					try { oEvent.preventDefault(); } catch(e) {}
					JWL.trigger(this, 'toggleoptions');
					return false;
				}
			}
		}
	},
	/**
		Component prototype members
		@type	Object
	*/
	prototype: {
		/**
			Toggles the display of options editing
			@param	{Boolean}	[bHide]	Set it to true to force hiding
		*/
		showOptions: function(bHide) {
			var oOpts = JWL.get(this).querySelector('.jsonoptions-opts');
			var sClass = oOpts.getAttribute('class') || '';
			if (bHide || sClass.indexOf('shown') > -1) {
				oOpts.setAttribute('class', sClass.replace('shown', ''));
		}
		else {
			var sJson = this.getAttribute('data-options') || '';
			try { sJson = JUL.UI.obj2str(JSON.parse(sJson), true); } catch (e) {}
			JWL.get(this).querySelector('.jsonoptions-edit').value = sJson;
				oOpts.setAttribute('class', sClass + ' shown');
			}
		},
		/**
			Saves the edited options
		*/
		saveOptions: function() {
				var sJson = JUL.trim(JWL.get(this).querySelector('.jsonoptions-edit').value);
				if (sJson) {
					try { sJson = JSON.stringify(JSON.parse(sJson)); }
					catch (e) { window.alert('Text must be valid JSON.\n' + (e.description || e.message)); return; }
				}
			this.setAttribute('data-options', sJson);
			JWL.trigger(this, 'optionschanged');
			this.showOptions(true);
		}
	},
	/**
		Array of internal/external CSS for registering the custom element
		@type	Array|String
	*/
	css: ['lib/faws/css/font-awesome.min.css?v=0.8.2',
	 'lib/jwl/css/jsonoptions.css?v=0.8.2']
});

})();

/* end JWL.components.jsonoptions.js */
